package ui

import "fmt"
import "math/rand"

import gonanoid "github.com/matoous/go-nanoid/v2"

func nanoID() string {
	id, err := gonanoid.New()
	if err != nil {
		min, max := 1, 9999999
		return fmt.Sprintf("%d", rand.Intn(max-min+1)+min)
	}
	return id
}


type headerLink struct {
	Rel, Href string
}

// Multi sends multiple templ components one after the other
// extra useful for htmx out of band swaps
templ Multi(chn ...templ.Component) {
	for _, chd := range chn {
		@chd
	}
}

templ Empty() {
	<div></div>
}

var (
	headerLinks = []headerLink{
		{Rel: "manifest", Href: "/manifest.json"},
		{Rel: "stylesheet", Href: "/icons/light/style.css"},
		{Rel: "stylesheet", Href: "/css/tailwind-generated.min.css"},
		// {Rel: "icon", Href: ""},
		// {Rel: "apple-touch-icon", Href: ""},
	}
)

templ headers() {
	<meta charset="utf-8"/>
	<meta name="description" content="starter for true server side rendering using htmx templ daisyui"/>
	for _, lk := range headerLinks {
		<link rel={ lk.Rel } href={ lk.Href }/>
	}
	<script src="/index.js"></script>
	@templ.JSFuncCall("applySavedTheme")
	<title>Starter</title>
}

templ EmptyModalPopover() {
	<div
		id="modal"
		class="absolute top-0 w-full z-30 pointer-events-none"
	></div>
}

templ popovers() {
	<div
		id="toastContainer"
		class="absolute top-0 left-0 right-0 flex flex-col justify-start items-center z-50 pointer-events-none"
	></div>
	@EmptyModalPopover()
}

templ Page() {
	<head>
		@headers()
	</head>
	<body id={ "body" } class="absolute top-0 bottom-0 left-0 right-0 bg-base">
		@popovers()
		@navSideBar() {
			<div id={ "appContent" } class="w-full h-full">
				{ children... }
			</div>
		}
	</body>
}

templ icon(id, css string) {
	<i
		if id != "" {
			id={ id }
		}
		class={ "ph-light ", css }
	></i>
}

templ tooltip(label, targetID, triggerID, css string) {
	<div class={ "tooltip", css } data-tip={ label }>
		{ children... }
	</div>
}

templ themeController() {
	<li class="flex items-center p-2 rounded-lg group btn-ghost">
		<label class="swap swap-rotate">
			<!-- this hidden checkbox controls the state -->
			<input id={ "theme-toggle" } type="checkbox" class="theme-controller" onchange="persistTheme(this)" value="aqua"/>
			<!-- sun icon -->
			@icon("", "ph-sun text-2xl swap-off")
			<!-- moon icon -->
			@icon("", "ph-moon text-2xl swap-on")
		</label>
	</li>
}

templ sideBarItem(id, name, icn string, rt string) {
	@tooltip(name, "", "", "tooltip-bottom") {
		<li
			id={ id }
			if rt != "" {
				hx-get={ rt + "?partial=true" }
				hx-swap="innerHTML"
				hx-target="#sidebarContent"
				hx-push-url={ rt }
			}
			class={ "flex items-center p-2 rounded-lg group btn-ghost", }
		>
			@icon("", icn+" text-2xl")
		</li>
	}
}

templ divider() {
	<div class="divider divider-horizontal"></div>
}

templ navSideBarItems() {
	@sideBarItem("homeSidebarItem", "home", "ph-house", "/")
	@sideBarItem("tableSidebarItem", "table page", "ph-table", "/table")
	@divider()
	@tooltip("change theme", "", "", "tooltip-bottom") {
		@themeController()
	}
}

templ navSideBar() {
	<div class="drawer w-full h-full">
		<input id="my-drawer-3" type="checkbox" class="drawer-toggle"/>
		<div class="drawer-content flex flex-col">
			<!-- Navbar -->
			<div class="navbar bg-base-300 w-full">
				<div class="flex-none lg:hidden">
					<label for="my-drawer-3" aria-label="open sidebar" class="btn btn-square btn-ghost">
						@icon("", "ph-list text-3xl")
					</label>
				</div>
				<div class="mx-2 flex-1 px-2">Starter</div>
				<div class="hidden flex-none lg:block">
					<ul class="menu menu-horizontal">
						<!-- Navbar menu content here -->
						@navSideBarItems()
					</ul>
				</div>
			</div>
			<div id="sidebarContent" class="w-full h-full">
				{ children... }
			</div>
		</div>
		<div class="drawer-side">
			<label for="my-drawer-3" aria-label="close sidebar" class="drawer-overlay"></label>
			<ul class="menu bg-base-200 min-h-full p-4">
				<!-- Sidebar content here -->
				@navSideBarItems()
			</ul>
		</div>
	</div>
}

type AlertType string

const (
	AlertTypeInfo    AlertType = "alert-info"
	AlertTypeSuccess AlertType = "alert-success"
	AlertTypeWarning AlertType = "alert-warning"
	AlertTypeError   AlertType = "alert-error"
)

var (
	cssAlert = map[AlertType]string{
		AlertTypeInfo:    "alert-info",
		AlertTypeSuccess: "alert-success",
		AlertTypeWarning: "alert-warning",
		AlertTypeError:   "alert-error",
	}

	cssAlertIcon = map[AlertType]string{
		AlertTypeInfo:    "ph-info",
		AlertTypeSuccess: "ph-check-circle",
		AlertTypeWarning: "ph-warning",
		AlertTypeError:   "ph-warning-circle",
	}
)

type PropsAlert struct {
	Label string
	Type  AlertType
}

templ Alert(props PropsAlert) {
	@alert(props.Label, props.Type, nanoID())
}

templ alert(label string, typ AlertType, baseID string) {
	<div hx-swap-oob="beforeend:#toastContainer">
		<div
			id={ "toastNotif_" + baseID }
			role="alert"
			class={ "alert", cssAlert[typ], "mt-4 pointer-events-auto" }
		>
			@icon("", "text-xl "+cssAlertIcon[typ])
			<span>{ label }</span>
			<button id={ "toastDismissBtn_" + baseID } class="btn btn-ghost btn-square cursor-pointer h-6 w-6">
				@icon("", "ph-x text-xl")
			</button>
		</div>
		@templ.JSFuncCall(
			"dismissToast",
			"toastNotif_"+baseID,
			"toastDismissBtn_"+baseID,
			6,
		)
	</div>
}

templ thead() {
}

templ tr() {
	<tr class="hover:bg-base-300">
		{ children... }
	</tr>
}

templ table() {
	<table class="table table-zebra">
		<thead>
			<tr>
				<th></th>
				<th>Name</th>
				<th>Job</th>
				<th>Favorite Color</th>
			</tr>
		</thead>
		<tbody>
			@tr() {
				<th>1</th>
				<td>Cy Ganderton</td>
				<td>Quality Control Specialist</td>
				<td>Blue</td>
			}
			@tr() {
				<th>2</th>
				<td>Hart Hagerty</td>
				<td>Desktop Support Technician</td>
				<td>Purple</td>
			}
			@tr() {
				<th>3</th>
				<td>Brice Swyre</td>
				<td>Tax Accountant</td>
				<td>Red</td>
			}
		</tbody>
	</table>
}

templ progress() {
	<div class="w-full flex flex-col items-center justify-center">
		<progress id="progress-indicator" class="progress w-full h-1 htmx-indicator"></progress>
	</div>
}

type PropsButton struct {
	ID, Label, Type, CSS string
}

templ Button(props PropsButton) {
	<button id={ props.ID } type={ props.Type } class={ "btn", props.CSS }>{ props.Label }</button>
}
